#!/usr/bin/env bash

set -euo pipefail

TAG=clamav
CLAMD_PORT=3310
REST_INTERFACE_PORT=8080
DATADIR="$(pwd)/data"
CLAMD_CONTAINER=clamav
REST_CONTAINER=clamav-rest
START_INSTANCE="docker run --privileged=true -v ${DATADIR}:/var/lib/clamav"
DAILY_DATA_FILE="${DATADIR}/daily.cvd"

source ./helper.sh

function main() {
  cleanup
  build_and_test_clamd_container
  build_and_test_rest_interface_container
}

function cleanup() {
  clean_data_dir
  stop_and_remove_existing_containers
}

function clean_data_dir() {
  rm -rf ${DATADIR} || true
  mkdir ${DATADIR}
}

function stop_and_remove_existing_containers() {
  for container in ${CLAMD_CONTAINER} ${REST_CONTAINER}; do
    execute_silently "docker kill ${container}"
    execute_silently "docker rm ${container}"
  done
}

function build_and_test_clamd_container() {
  echo_yellow "========"
  echo_yellow "BUILD..."
  echo_yellow "========"
  docker build -t ${TAG} clamav
  test_clamd_container
}

function build_and_test_rest_interface_container() {
  docker build -t ${TAG}-rest clamav-rest
  test_rest_interface_container
}

function test_rest_interface_container() {
  echo_yellow "========"
  echo_yellow "TESTING REST INTERFACE CONTAINER..."
  echo_yellow "========"

  install_data_files

  start_clamd_container "Simple start" "${START_INSTANCE}"

  docker run -itd -p ${REST_INTERFACE_PORT}:${REST_INTERFACE_PORT} --name=${REST_CONTAINER} -e HOST=${CLAMD_CONTAINER} --link ${CLAMD_CONTAINER}:${CLAMD_CONTAINER} ${REST_CONTAINER}

  test_rest_interface_ping
  test_scan_clean_file
  test_scan_infected_file
}

function test_rest_interface_ping() {
  local response="999"
  local readonly count=0

  echo_yellow "TEST ping the REST interface"

  while [ ${response} != "200" ]; do
    sleep 4
    count=$((count + 1))
    if [ ${count} -gt 5 ]; then
      echo_red "FAILED rest api not starting"
      exit 1
    fi
    response=$(curl -w %{http_code} -s --output /dev/null localhost:${REST_INTERFACE_PORT})
  done

  echo_green "SUCCESS: REST interface responding"
}

function test_scan_clean_file() {
  local readonly virus_test=$(curl -s -F "name=test-clean" -F "file=@helper.sh" localhost:${REST_INTERFACE_PORT}/scan | grep -o true)

  echo_yellow "TEST scanning a clean file"

  if [ ${virus_test} == "true" ]; then
    echo_green "SUCCESS rest api working and scanning clean files Correctly"
  else
    echo_red "FAILED rest api not scanning clean files correctly"
    exit 1
  fi
}

function test_scan_infected_file() {
  local readonly virus_test=$(curl -s -F "name=test-virus" -F "file=@test/eicar.com" localhost:${REST_INTERFACE_PORT}/scan | grep -o false)

  echo_yellow "TEST scanning an infected file"

  if [ ${virus_test} == "false" ]; then
    echo_green "SUCCESS rest api working and detecting viruses Correctly"
    exit 0
  else
    echo_red "FAILED rest api not detecting viruses correctly"
    exit 1
  fi
}


function test_clamd_container() {
  echo_yellow "=========="
  echo_yellow "TESTING CLAMD CONTAINER..."
  echo_yellow "=========="

  # This test is slow, because it downloads >100MB of virus definition data
  # So, it's worth temporarily skipping it if you're running this script repeatedly
  test_downloading_daily_cvd

  install_data_files # ensure subsequent tests have the data files they need
  test_adding_custom_setting
  test_removing_custom_setting
  test_freshclam_settings
  test_update_false
  test_update_true
  stop_and_remove_existing_containers
}

function install_data_files() {
  if [ ! -e ${DAILY_DATA_FILE} ]; then
    cp test/data/* ${DATADIR}/
  fi
}

function test_downloading_daily_cvd() {
  echo_yellow "Testing daily.cvd download..."
  start_clamd_container "Simple start" "${START_INSTANCE}"

  start=`date +%s`

  x=0
  while [ "$x" -lt 100 -a ! -e $DAILY_DATA_FILE ]; do
    x=$((x+1))
    echo_yellow "daily.cvd not yet downloaded. Sleeping..."
    sleep 10
  done

  end=`date +%s`

  runtime=$((end-start))
  echo_green "It took $runtime seconds to get cve's"
}

function test_adding_custom_setting() {
  echo_yellow "Test CLAMD_SETTINGS_CSV add setting..."

  start_clamd_with_custom_settings

  docker exec -it ${CLAMD_CONTAINER} \
    grep "^LogClean yes" /usr/local/etc/clamd.conf || (echo_red "TEST FAILED..........."; exit 1)
}

function test_removing_custom_setting() {
  echo_yellow "Test CLAMD_SETTINGS_CSV remove setting..."

  start_clamd_with_custom_settings

  if docker exec -it ${CLAMD_CONTAINER} grep "^LogVerbose " /usr/local/etc/clamd.conf ; then
    echo_red "Failed test for deleting entry..."
    exit 1
  fi
}

function test_freshclam_settings() {
  echo_yellow "Test FRESHCLAM_SETTINGS_CSV add complex setting..."

  start_clamd_with_custom_settings

  docker exec -it ${CLAMD_CONTAINER} \
    grep "^OnUpdateExecute /bin/true wow" /usr/local/etc/freshclam.conf || (echo_red "TEST FAILED..........."; exit 1)
}

function start_clamd_with_custom_settings() {
  start_clamd_container "Start with custom settings" "${START_INSTANCE} \
    -e \"CLAMD_SETTINGS_CSV=LogClean yes,LogVerbose\" \
    -e \"FRESHCLAM_SETTINGS_CSV=OnUpdateExecute /bin/true wow\""
}

function test_update_false() {
  echo_yellow "Testing update false..."
  touch ${DATADIR}/1strun
  start_clamd_container "Test UPDATE=false mode" "${START_INSTANCE} -e \"UPDATE=false\""

  rm ${DATADIR}/1strun
}

function test_update_true() {
  echo_yellow "Testing update true..."
  start_clamd_container "Test UPDATE_ONLY=true mode" "${START_INSTANCE} -e \"UPDATE_ONLY=true\""
  echo_yellow "Started now polling for mutex file..."
  if ! wait_until_cmd "ls ${DATADIR}/1strun" ; then
    echo_red "Error, not detecting mutex file???"
    docker logs ${CLAMD_CONTAINER}
    exit 1
  else
    echo_green "Found mutex file..."
  fi
}


function start_clamd_container() {
  local readonly label=$1
  shift
  local readonly cmd=$@

  stop_and_remove_existing_containers
  echo_yellow "STARTING TEST: ${label}"
  echo_yellow "Running: ${cmd} --name ${CLAMD_CONTAINER} -p ${CLAMD_PORT}:3310 ${TAG}"
  bash -c "${cmd} --name ${CLAMD_CONTAINER} -d -p ${CLAMD_PORT}:3310 ${TAG}"
  if ! wait_until_started ; then
    echo_red "Error, not started in time..."
    docker logs ${CLAMD_CONTAINER}
    exit 1
  fi
}

function wait_until_started() {
  sleep 1
  docker exec -it ${CLAMD_CONTAINER} /readyness.sh POLL
}

main
