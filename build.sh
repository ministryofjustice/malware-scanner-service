#!/usr/bin/env bash

set -euo pipefail

TAG=clamav
PORT=3310
DATADIR="$(pwd)/data"
CLAMD_CONTAINER=clamav
REST_CONTAINER=clamav-rest
START_INSTANCE="docker run --privileged=true -v ${DATADIR}:/var/lib/clamav"
DAILY_DATA_FILE="${DATADIR}/daily.cvd"

source ./helper.sh

function main() {
  cleanup
  build_clamd_container
  build_rest_interface_container
}

function cleanup() {
  clean_data_dir
  stop_and_remove_existing_containers
}

function clean_data_dir() {
  rm -rf ${DATADIR} || true
  mkdir ${DATADIR}
}

function stop_and_remove_existing_containers() {
  for container in ${CLAMD_CONTAINER} ${REST_CONTAINER}; do
    execute_silently "docker kill ${container}"
    execute_silently "docker rm ${container}"
  done
}

function build_clamd_container() {
  echo "========"
  echo "BUILD..."
  echo "========"
  docker build -t ${TAG} .
  test_clamd_container
}

function test_clamd_container() {
  echo "=========="
  echo "TESTING CLAMD CONTAINER..."
  echo "=========="

  # This test is slow, because it downloads >100MB of virus definition data
  # So, it's worth temporarily skipping it if you're running this script repeatedly
  # test_downloading_daily_cvd

  # If test_downloading_daily_cvd runs, this cp step is unnecessary,
  # because fresh cvd & dat files will have been downloaded
  cp test/data/* ${DATADIR}/

  test_adding_custom_setting
  test_removing_custom_setting
  test_update_false
  test_update_true
  stop_and_remove_existing_containers
}

function test_downloading_daily_cvd() {
  echo "Testing daily.cvd download..."
  start_clamd_container "Simple start" "${START_INSTANCE}"

  start=`date +%s`

  x=0
  while [ "$x" -lt 100 -a ! -e $DAILY_DATA_FILE ]; do
    x=$((x+1))
    echo "daily.cvd not yet downloaded. Sleeping..."
    sleep 20
  done

  end=`date +%s`

  runtime=$((end-start))
  echo "It took $runtime seconds to get cve's"
}

function test_adding_custom_setting() {
  echo "Test CLAMD_SETTINGS_CSV add setting..."

  start_clamd_container "Start with custom settings" "${START_INSTANCE} \
    -e \"CLAMD_SETTINGS_CSV=LogClean no,StatsEnabled\" \
    -e \"FRESHCLAM_SETTINGS_CSV=OnUpdateExecute /bin/true wow\""

  echo "Test CLAMD_SETTINGS_CSV add setting..."
  docker exec -it ${CLAMD_CONTAINER} \
    grep "^LogClean no" /usr/local/etc/clamd.conf
}

function test_removing_custom_setting() {
  echo "Test CLAMD_SETTINGS_CSV remove setting..."
  if docker exec -it ${CLAMD_CONTAINER} grep "^StatsEnabled " /usr/local/etc/clamd.conf ; then
    echo "Failed test for deleting entry..."
    exit 1
  fi
  echo "Test FRESHCLAM_SETTINGS_CSV add complex setting..."
  docker exec -it ${CLAMD_CONTAINER} \
    grep "^OnUpdateExecute /bin/true wow" /usr/local/etc/freshclam.conf
}

function test_update_false() {
  echo "Testing update false..."
  touch ./data/1strun
  start_clamd_container "Test UPDATE=false mode" "${START_INSTANCE} -e \"UPDATE=false\""

  rm ./data/1strun
}

function test_update_true() {
  echo "Testing update true..."
  start_clamd_container "Test UPDATE_ONLY=true mode" "${START_INSTANCE} -e \"UPDATE_ONLY=true\""
  echo "Started now polling for mutex file..."
  if ! wait_until_cmd "ls ./data/1strun" ; then
    echo "Error, not detecting mutex file???"
    docker logs ${CLAMD_CONTAINER}
    exit 1
  else
    echo "Found mutex file..."
  fi
}

function build_rest_interface_container() {
  docker build -t ${TAG}-rest ${REST_CONTAINER}

  #start container.
  stop_and_remove_existing_containers

  start_clamd_container "Simple start" "${START_INSTANCE}"
  docker run -itd -p 8080:8080 --name=${REST_CONTAINER} -e HOST=${CLAMD_CONTAINER} --link ${CLAMD_CONTAINER}:${CLAMD_CONTAINER} ${REST_CONTAINER}
  sleep 20 #wait for app to start
  REST_CMD=$( curl -w %{http_code} -s --output /dev/null localhost:8080)
  VIRUS_TEST=$(curl -s -F "name=test-virus" -F "file=@eicar.com" localhost:8080/scan | grep -o false)

  if [ $REST_CMD == "200" ]; then
    if [ $VIRUS_TEST == "false" ]; then
      echo "SUCCESS rest api working and detecting viruses Correctly"
      exit 0
    else
      echo "FAILED rest api not detecting co correctly"
      exit 1
    fi
  else
    echo "rest api not starting."
    exit 1
  fi
}


function start_clamd_container() {
  local readonly label=$1
  shift
  local readonly cmd=$@

  stop_and_remove_existing_containers
  echo "STARTING TEST: ${label}"
  echo "Running: ${cmd} --name ${CLAMD_CONTAINER} -p ${PORT}:3310 ${TAG}"
  bash -c "${cmd} --name ${CLAMD_CONTAINER} -d -p ${PORT}:3310 ${TAG}"
  if ! wait_until_started ; then
    echo "Error, not started in time..."
    docker logs ${CLAMD_CONTAINER}
    exit 1
  fi
}

function wait_until_started() {
  sleep 1
  docker exec -it ${CLAMD_CONTAINER} /readyness.sh POLL
}

main
